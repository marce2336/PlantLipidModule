function [IntegLmMets,HarmLipidModuleInteg,ModelTemplate2] = IntegrateEssentialMets(HarmLmVars, PairedCompartments, UnpairedCompartments)
%% ========================================================================
% The 'IntegrateEssentialMets' function identifies metabolites present in  
% both models after the harmonization of the compartments abbreviations is 
% done. The duplicated metabolites are deleted from the LipidModule list. 
% If the metabolites are different, they are renamed by adding the "LM_" 
% prefix to the ID.
%
% USAGE:
%   [IntegLmMets,HarmLipidModuleInteg,ModelTemplate2] = IntegrateEssentialMets(HarmLmVars, PairedCompartments, UnpairedCompartments, ModelTemplate)
%
% INPUTS:   
%   HarmLmVars:         Struct that contains the following fields:
%                       * .HarmLmMets - list of harmonized metabolites from
%                           the LipidModule, that in this function will be
%                           verified to identify duplicated metabolites
%                           that are eliminated.
%                       * .HarmEssMets - list that contains complete
%                           informaton for each metabolite. This list is
%                           updated according to the results of the
%                           verification for duplicated metabolites.
%                       * .HarmLM - COBRA model structure of the Lipid
%                          module whose metabolites list is harmonized
%                          according to the paired up compartments results.
%           
%   PairedCompartments:   List of compartments from LipidModule paired-up
%                         with the ModelTemplate compartments.
%
%   UnpairedCompartments: List of compartments of LipidModule which don't
%                         have a equivalent compartment in
%                         ModelTemplate.PairedCompartments.
%
% OUTPUTS:
%       IntegLmMets:      Struct that contains the following fields:           
%                         * .HarmLmMetsInteg - list with harmonized metabolite IDs that results
%                             from matching the information of the metabolites
%                             of the LipidModule and ModelTemplate.
%           
%                         * .HarmEssMetsInteg - definite list of the harmonized
%                             metabolites that will be added to the ModelTemplate.
%
%       HarmLipidModuleInteg:    Lipid module with harmonized metabolites
%                                 IDs.
%
%       ModelTemplate2:   COBRA model structure of ModelTemplate with 
%                         harmonized 'metNames' field.
% =========================================================================                       
%% 

while ~isfield(HarmLmVars, 'HarmEssMets')
    java.lang.Thread.sleep(1)
end

fprintf('%s\n', '=======================================================================');
fprintf('%s\n', 'The reactions of the lipid module are being added to the model...');
fprintf('%s\n', '=======================================================================');

HarmLipidModuleMets = HarmLmVars.HarmLmMets;
HarmLipidModule     = HarmLmVars.HarmLM; 
HarmLipidModule.mets = HarmLipidModuleMets;

pathTm = fullfile('InputFiles','ModelTemplate.mat');
Temp1 = load(pathTm); %Generated by the matlab app
ModelTemplate = Temp1.modelTemplate;
clearvars pathTm Temp1


%% 1). Verify the existence of metabolites fields in the Template Model:

[IdentifiersInField, IdentifiersInNotes] = CheckMetIdentifiers(ModelTemplate);

% Check location of identifiers information in model fields and act
% accordingly:

% Check if identifiers are located in dedicated fields:
ListOtherIdsInField = IdentifiersInField(ismember({'ChEBI';'InChI';'PubChem';'LIPID MAPS'},IdentifiersInField(:,1)),2);

if ~isempty(ListOtherIdsInField)
    Flag1 = 1;
else
    Flag1 = 0;
    ListOtherIdsInField = {};
end

% Check if identifiers are located in metNotes field:
if ~isempty(IdentifiersInNotes)
    ListOtherIdsInNotes = cell(size(ModelTemplate.mets,1), size(IdentifiersInNotes,1));
    Flag2 = 1;
    for i = 1:size(IdentifiersInNotes,1)
        Identifier_i = IdentifiersInNotes(i,1);
        ListOtherIdsInNotes(:,i) = extractAfter(ModelTemplate.metNotes, Identifier_i);
        ListOtherIdsInNotes(:,i) = insertBefore(ListOtherIdsInNotes(:,i), 1, Identifier_i);
    end
else
    ListOtherIdsInNotes = {};
    Flag2 = 0;
end

%% 2). Find equivalent metabolites by matching identifiers information between ModelTemplate and LipidModule:

% CASE 1: KEGGID, plus the Charge and Formula of metabolites are available:

% First verify that ModelTemplate contains the minimum metabolites 
% information in dedicated fields: 'KEGG','Charge','Formula'!

% Check that KEGGID is available in dedicated model field:
KEGGinField = sum(ismember('KEGG',IdentifiersInField));

% Check that KEGGID is available in 'met.Notes' model field:
KEGGinNotes = sum(ismember('KEGG',IdentifiersInNotes));

% Check if metabolites Charge and Formula are available in dedicated model fields:
FindChFormInFields = sum(ismember({'Charge', 'Formula'},IdentifiersInField));

if (KEGGinField + FindChFormInFields) == 3 || (KEGGinNotes + FindChFormInFields) == 3
    Flag3 = sum(ismember('KEGG',IdentifiersInField));
    
    % Create struct with identifiers information:
    IdentifiersInfo.Notes = ListOtherIdsInNotes;
    IdentifiersInfo.Field = ListOtherIdsInField;
    IdentifiersInfo.Flag1 = Flag1;
    IdentifiersInfo.Flag2 = Flag2;
    IdentifiersInfo.Flag3 = Flag3;
    
    [IntegLmMets, HarmLipidModuleInteg, ModelTemplate2] = FindMatchingMets(ModelTemplate,...
        HarmLmVars,IdentifiersInfo, PairedCompartments, UnpairedCompartments);  
    
% CASE 2: Metabolites don't have the KEGGID, but CheBI, InChI, PubChem
%         and/or LIPID MAPS identifiers are available:
elseif ~isempty(ListOtherIdsInField) || ~isempty(ListOtherIdsInNotes)
    
    % Check if metabolites Charge and Formula are available in dedicated model fields:
    FindChFormInFields = sum(ismember({'Charge', 'Formula'},IdentifiersInField));
    
    if sum(FindChFormInFields) == 2
        Flag4 = 1;
        
    elseif sum(FindChFormInFields) == 1
        Flag4 = 0;
        
        prompt = ['WARNING: The metabolites field ''metCharge'' or ''metFormula'' is missing!'...
            newline 'The identification of equivalent metabolites will be made using the identifiers available.'...
            newline 'To improve the accuracy of the integration of the metabolites between the models,'...
            newline 'consider adding the missing metabolites Charge or Formula and rerun'...
            newline 'the ''LipidModuleIntegration'' function.'...
            newline 'Do you want to stop the integration of the LipidModule? Y/N [N]: '];
        
        FinishIntegration = input(prompt,'s');

        if isempty(FinishIntegration)
            FinishIntegration = 'N';
        end

        if FinishIntegration == 'Y' || FinishIntegration == 'y'
            return
        end
    
    end
        
    % If metabolites Charge and Formula are not included in dedicated
    % fields, check if they are available in 'metNotes' field:
    if Flag4 == 0
        FindChFormInNotes = sum(ismember({'Charge', 'Formula'},IdentifiersInNotes));

        if sum(sum(FindChFormInNotes)) > 0

            prompt = ['WARNING: The metabolites Charge and/or Formula are contained in the ''metNotes'' field!'...
                newline 'Consider creating dedicated fields for each parameter in order to be used for the'...
                newline 'identification of equivalent metabolites between the models and rerun.'...
                newline 'the ''LipidModuleIntegration'' function.'...
                newline 'Do you want to stop the integration of the LipidModule? Y/N [N]: '];

            FinishIntegration = input(prompt,'s');

            if isempty(FinishIntegration)
                FinishIntegration = 'N';
            end

            if FinishIntegration == 'Y' || FinishIntegration == 'y'
                return
            end
        end
    end
    
    % Create struct with identifiers information:
    IdentifiersInfo.Notes = ListOtherIdsInNotes;
    IdentifiersInfo.Field = ListOtherIdsInField;
    IdentifiersInfo.Flag1 = Flag1;
    IdentifiersInfo.Flag2 = Flag2;
    IdentifiersInfo.Flag4 = Flag4;
    
    [IntegLmMets,HarmLipidModuleInteg,ModelTemplate2] = FindMatchingIdentifiers(ModelTemplate,...
        HarmLmVars, IdentifiersInfo, PairedCompartments, UnpairedCompartments);
  
    
    
% CASE 3: There is not enough information for the correct identification of
%         equivalent metabolites between the models! 
else
    prompt = ['WARNING: ...' ...
        newline 'There is not enough information for the correct identification of'...
        newline 'equivalent metabolites between the models!'...
        newline 'Consider veryfing and adding missing information such as the listed below, and rerun'...
        newline 'the ''LipidModuleIntegration'' function:'...
        newline '* KEGGID, plus metabolites Charge and Formula'...
        newline '* The addition of ChEBI, InChI, PubChem, and/or LIPID MAPS identifiers is highly recommended!'...
        newline 'Do you want to stop the integration of the LipidModule? Y/N [N]: '];
    
    FinishIntegration = input(prompt,'s');
    
    if isempty(FinishIntegration)
        FinishIntegration = 'N';
    end

    switch FinishIntegration
        case {'N', 'n'} % If the integration is to be continued, check if ModelTemplate contains 
                        % mets with identical name as LipidModule mets and change if necessary!
            
            % Find metabolites with same ID in ModelTemplate and the Lipid Module
            HarmEssentialMets = HarmLmVars.HarmEssMets;
            [idxRepeated, ~] = CompareArrays(HarmEssentialMets(:,1), ModelTemplate.mets);

            for j = 1:numel(idxRepeated)
                EssMetsIdx = idxRepeated(j);
                LmID = HarmEssentialMets(EssMetsIdx,1);
                IsMetLMU = true;

                [HarmLipidModuleMets, HarmEssentialMets, HarmLipidModule,~,~] = CheckUniquenessID(LmID,HarmLipidModuleMets,IsMetLMU,...
                        HarmLipidModule,HarmEssentialMets,EssMetsIdx);
            end
            
            % Create struct with information of essential metabolites. Note that these 
            % metabolites were not integrated in ModelTemplate because there was not
            % enough information:
    
            IntegLmMets.HarmEssMetsInteg  = HarmEssentialMets;
            IntegLmMets.HarmLmMetsInteg   = HarmLipidModuleMets;
            HarmLipidModuleInteg          = HarmLipidModule;
            ModelTemplate2                = ModelTemplate;
        
        case {'Y', 'y'}
            IntegLmMets          = '';
            HarmLipidModuleInteg = '';
            ModelTemplate2       = '';
            disp('=======================================================================')
            disp('The integration of the Plant Lipid Module was stopped!.')
            disp('If warning messages were displayed, follow the recommendations and')
            disp('run the "LipidModuleIntegration" command again!')
            disp('=======================================================================')
            return
    end
    
end

end