function AddRxnsToModel(ModelTemplate3,HarmLipidModuleInteg,UnpairedCompartments)
%% ========================================================================
% 'AddRxnsToModel' function add the reactions of the Lipid module to the
% Template model. Also executes an additional step of removing the
% duplicated reactions by checking the stoichiometric matrix (S), detecting
% the columns of S that are identical up to scalar multiplication. The
% final step is printing out the merged model.
%
% USAGE:
%   AddRxnsToModel(ModelTemplate3,HarmLipidModuleInteg)
%
% INPUTS:   
%   ModelTemplate3:         COBRA model structure generated by the
%                           'AddMetabolites' function.
%
%   HarmLipidModuleInteg:   List generated by the 'IntegrateEssentialMets'
%                           function.
%
% OUTPUTS:
%   OutputModel:            COBRA model structure that contains all the merged
%                           reactions from the Lipid module and the 
%                           ModelTemplate.
%
%	OutputModelUnique:      COBRA model structure after removing the
%                           duplicated reactions detected in the OutputModel.          
% =========================================================================                       
%% 
%Import rxnKEGG ID data
pathRxnKEGG = fullfile('InputFiles','LipidModule.xlsx');
[~, ~, rxnID] = xlsread(pathRxnKEGG,'Reaction List','A2:A5957');
[~, ~, rxnKEGGs] = xlsread(pathRxnKEGG,'Reaction List','N2:N5957');
rxnKEGGID = [rxnID,rxnKEGGs];
rxnKEGGID(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),rxnKEGGID)) = {''};
rxnKEGGIdx = cellfun(@isempty,rxnKEGGID(:,2));%Idx of empty cells
rxnKEGGID(rxnKEGGIdx==1,:) = [];
clearvars pathRxnKEGG rxnID rxnKEGGs rxnKEGGIdx

HarmLipidModuleInteg = addMIRIAMAnnotations(HarmLipidModuleInteg, rxnKEGGID(:,1)', 'kegg.reaction', rxnKEGGID(:,2)');

%% Remove light reactions and associated metabolites when not required
pathAddLight = fullfile('OutputFiles','AddLightRxns.mat');
Temp1 = load(pathAddLight);
AddLightRxns = Temp1.AddLightRxns;

if eq(AddLightRxns,'N') || eq(AddLightRxns,'n')    
    RxnsToRemove = {'Im_hnu', 'Ex_pho_loss', 'PSII_h', 'Cytb6f_h', 'PSI_h', 'ATPase_h'};
    HarmLipidModuleInteg = removeRxns(HarmLipidModuleInteg, RxnsToRemove, 'metFlag',false);
    
    MetsToRemove = {'H[l]', 'PCox[d0]', 'PCrd[d0]', 'PQH2[d0]', 'PQ[d0]', 'hnu[d0]', 'pho_loss[d0]', 'Dmpq[d0]'};
    HarmLipidModuleInteg = removeMetabolites(HarmLipidModuleInteg, MetsToRemove);
    
    ModelTemplate3 = removeMetabolites(ModelTemplate3, MetsToRemove);
    
end
clearvars Temp1
delete(pathAddLight)

%% Double check that reaction IDs are not duplicated
for RxnIdx = 1:size(HarmLipidModuleInteg.rxns,1)
    RxnID = HarmLipidModuleInteg.rxns(RxnIdx,1);
    [~, ExistRxn] = CompareArrays(RxnID, ModelTemplate3.rxns);
    if ~isempty(ExistRxn)
        HarmLipidModuleInteg.rxns{RxnIdx,1} = strcat('LM_',(HarmLipidModuleInteg.rxns{RxnIdx,1})); %Add prefix to differentiate the metabolite
    end
end

%% Add LipidModule reactions:
ModelTemplate3 = addMultipleReactions(ModelTemplate3,HarmLipidModuleInteg.rxns,...
    HarmLipidModuleInteg.mets,HarmLipidModuleInteg.S,'lb', HarmLipidModuleInteg.lb,...
    'ub',HarmLipidModuleInteg.ub,'rxnConfidenceScores', HarmLipidModuleInteg.rxnConfidenceScores,...
    'rxnNames', HarmLipidModuleInteg.rxnNames, 'subSystems', cellstr(string(HarmLipidModuleInteg.subSystems)),...
    'rxnECNumbers', HarmLipidModuleInteg.rxnECNumbers,'rxnReferences', HarmLipidModuleInteg.rxnReferences, ...
    'rxnKEGGID', HarmLipidModuleInteg.rxnKEGGID, 'grRules', HarmLipidModuleInteg.grRules);

%% Verify gene and protein information
if isfield(ModelTemplate3,'genes') && isfield(ModelTemplate3,'geneNames')
    FieldsSize1 = [(size(ModelTemplate3.genes,1)),(size(ModelTemplate3.geneNames,1))];
    SortedField1 = sort(FieldsSize1);
    if length(unique(FieldsSize1)) > 1 && FieldsSize1(1,1) == SortedField1(1,2)
        for i = (SortedField1(1,1)+1):length(ModelTemplate3.genes)%2401
            ModelTemplate3.geneNames(i,1) = ModelTemplate3.genes(i,1);
        end
    end
    if isfield(ModelTemplate3,'proteins')
        FieldsSize2 = [(size(ModelTemplate3.genes,1)),(size(ModelTemplate3.proteins,1))];
        SortedField2 = sort(FieldsSize2);
        if length(unique(FieldsSize2)) > 1 && FieldsSize2(1,1) == SortedField2(1,2)
            for ii = (SortedField2(1,1)+1):length(ModelTemplate3.genes)
                txt = cellstr(['COBRAProtein', num2str(ii)]);
                ModelTemplate3.proteins(ii,1) = txt;  
            end
        end
    end  
end

%% Add new compartments to model and create output variable:
if sum(sum(~cellfun(@isempty, UnpairedCompartments))) > 0
    % Check what new compartments are missing in ModelTemplate:
    [~, missingComps]        = setdiff(UnpairedCompartments(:,1), ModelTemplate3.comps);
    ModelTemplate3.comps     = [ModelTemplate3.comps; UnpairedCompartments(missingComps,1)];
    ModelTemplate3.compNames = [ModelTemplate3.compNames; UnpairedCompartments(missingComps,2)];
end

OutputModel = ModelTemplate3;
assignin('base','OutputModel',OutputModel)

%%
% 8. Verify for duplicated reactions:
% FR –> checks F + R matrix, where S:=?F+R, which ignores reaction direction
[OutputModelUnique, removedRxnInd, keptRxnInd] = checkDuplicateRxn(ModelTemplate3, 'FR', 1, 1);

%%
% 9. Adjust reversibility of reactions removed: in the cases that are 
%    explained below the kept reaction will be set to be reversible
%
%   Case 1: Reactants and products have the same orientation in the
%   reaction formula but the directionality is different:
%       Ej: Rxn_Kept A + B -> C
%           Rxn_Rmvd A + B <-> C
%
%   Case 2: The reactions have the same stoichiometry but reactants and
%   products don't have the same orientation in the formula and one or both
%   reactions are irreversible:
%       Ej: Rxn_Kept A + B -> C
%           Rxn_Rmvd C -> A + B

if ~isempty(removedRxnInd)
    RxnsToAdjust = CheckRxnDirectionality(keptRxnInd, removedRxnInd, ModelTemplate3);
    
    for j = 1:size(RxnsToAdjust,1)
        KeptRxnID = RxnsToAdjust{j};
        KeptRxnIdx = strcmp(OutputModelUnique.rxns, KeptRxnID);
        OutputModelUnique.lb(KeptRxnIdx) = -1000;
    end
    
else
    RxnsToAdjust = {};
end

%% Keep variables in the workspace
assignin('base','OutputModelUnique',OutputModelUnique)

%% Save files to Output folder

while ~exist('OutputModel', 'var')
    java.lang.Thread.sleep(1)
end

cd('.\OutputFiles');

% Save extended model in default formats .xls and .mat:
RxnsToAdjust = splitvars(table(RxnsToAdjust));
writetable(RxnsToAdjust, 'RxnsAdjustedDirectionality.txt');
writeCbModel(OutputModel, 'format','XLS', 'fileName', 'OutputModel.xls')
writeCbModel(OutputModel, 'format','MAT', 'fileName', 'OutputModel.mat')
writeCbModel(OutputModelUnique, 'format','XLS', 'fileName', 'OutputModelUnique.xls')
writeCbModel(OutputModelUnique, 'format','MAT', 'fileName', 'OutputModelUnique.mat')


% Save extended file in .xml format if requested by user:
pathSave = fullfile('OutputFiles','flagSave.mat');
Temp2 = load(pathSave);
flagSave = Temp2.flagSave;

if strcmp(flagSave, 'y') || strcmp(flagSave, 'Y')
    writeCbModel(OutputModel, 'format','SBML', 'fileName', 'OutputModel.xml')
    writeCbModel(OutputModelUnique, 'format','SBML', 'fileName', 'OutputModelUnique.xml')
end
delete('flagSave.mat')

% Double check that extended model was saved in default location and print message:
if exist('OutputModelUnique.mat', 'file')
    disp('=======================================================================')
    disp('The model was created in the "OutputFiles" folder!')
    disp('To find the files follow the route "../LipidModuleIntegration/OutputFiles"')
    disp('=======================================================================')
end

% Delete unused variables:
clearvars HarmEssentialMets
delete('HarmonizedComp.mat')
delete('CommonComps.mat')

% Change path to current directory:
pathDirSave = fullfile('OutputFiles', 'currentFolder.mat');
Temp3 = load(pathDirSave);
currentFolder = Temp3.currentFolder;
delete('currentFolder.mat')
cd(currentFolder)

end