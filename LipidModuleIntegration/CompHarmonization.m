function CompHarmonization
%% ========================================================================
% The 'CompHarmonization' function harmonizes compartment abbreviations in
% LipidModule using the 'Paired-up compartments' file geneated by the input
% user information.
% 'CompHarmonization' sequentially calls several functions necessary to
% integrate the LipidModule into the ModelTemplate.
%
% 1. checkUniqueIDs: verify that metabolite IDs are not duplicated in the
%    two models.
%
% 2. IntegrateEssentialMets: check the metabolites of the ModelTemplate
%    that are already included in the LipidModule and harmonizes their IDs.
%
% 3. AddMetabolites: perform the integration of the metabolites of
%    the LipidModule into the Template model.
%
% 4. AddRxnsToModel: perform the integration of the reactions of
%    the LipidModule into the ModelTemplate and generate a model file that
%    is saved in the OutputFiles folder.
% =========================================================================
%%
% Upload variables:
pathHComps = fullfile('OutputFiles','HarmonizedComp.mat');
temp1 = load(pathHComps); %Generated by the matlab app
harmonizedComp = temp1.harmonizedComp;

pathCommonComps = fullfile('OutputFiles','CommonComps.mat');
temp2 = load(pathCommonComps);
commonComps = temp2.commonComps;

pathPairedComps1 = fullfile('OutputFiles','Paired_Compartments.mat'); %Generated by the matlab app
temp1 = load(pathPairedComps1); 
pairedCompartments = temp1.paired_Compartments;
pathPairedComps2 = fullfile('OutputFiles','Paired_Compartments.txt');
writetable(pairedCompartments,pathPairedComps2);

pathUnpairedComps1 = fullfile('OutputFiles','Unpaired_Compartments.mat'); %Generated by the matlab app
temp2 = load(pathUnpairedComps1); %Generated by the matlab app
unpairedCompartments = temp2.unpaired_Compartments;

pathHLM = fullfile('OutputFiles','HarmLipidModule.mat');
temp3 = load(pathHLM); %Generated by the MatchingCompartments function
harmLipidModule = temp3.harmLipidModule;
harmLipidModuleMets = harmLipidModule.mets;

pathHEMets = fullfile('OutputFiles','HarmEssentialMets.mat');
temp4 = load(pathHEMets); %Generated by the MatchingCompartments function
harmEssentialMets = temp4.harmEssentialMets;
delete(pathHLM, pathHEMets, pathPairedComps1)

clearvars Temp1 Temp2 Temp3 Temp4 pathPairedComps1 pathUnpairedComps1...
    pathHLM pathHEMets

%% Verify that the information of all compartments was checked:

% If list of Unpaired compartments is empty, verify that all compartments 
% belong to any category: paired, unpaired, common or harmonized and act accordingly:

pairedCompartments = table2cell(pairedCompartments);
pairedCompartments = pairedCompartments(~cellfun(@isempty, pairedCompartments(:,1)),:);

unpairedCompartments = table2cell(unpairedCompartments);
unpairedCompartments = unpairedCompartments(~cellfun(@isempty, unpairedCompartments(:,1)),:);

if isempty(unpairedCompartments)
    % Get complete list of compartments in LipidModule:
    compsList_Lm = [harmLipidModule.comps, harmLipidModule.compNames];

    % Verify compartments in list of harmonized compartments ('HarmonizedComp'):
    if ~isempty(harmonizedComp)
        for i = 1:size(harmonizedComp,1)
            getCompName = harmonizedComp(i,2);
            existComp = strcmp(compsList_Lm(:,2), getCompName);
            compsList_Lm = compsList_Lm(existComp == 0,:);
        end
    end

    % Verify compartments in list of common compartments ('CommonComps'):
    if ~isempty(commonComps)
        for i = 1:size(commonComps,1)
            getCompName = commonComps(i,2);
            existComp = strcmp(compsList_Lm(:,2), getCompName);
            compsList_Lm = compsList_Lm(existComp == 0,:);
        end
    end

    % Verify compartments in list of compartments paired-up ('PairedCompartments'):
    if ~isempty(pairedCompartments)
        for i = 1:size(pairedCompartments,1)
            getCompName = pairedCompartments(i,2);
            existComp = strcmp(compsList_Lm(:,2), getCompName);
            compsList_Lm = compsList_Lm(existComp == 0,:);
        end
    end
    
    unpairedCompartments = compsList_Lm;
end

%% Harmonize usage of compartments abbreviations between models:

% If compartments were paired-up by the user, harmonize the abbreviations in the LipidModule:   
if ~isempty(pairedCompartments)
    %Create variable with compartments abbreviations and names from LipidModule:
    compListLipidModule = pairedCompartments(:,1:2);

    %Create variable with compartments abbreviations and names from ModelTemplate:
    CompListTemplate = pairedCompartments(:,3:4);

    for i = 1:size(compListLipidModule,1)
        compAbbLm = compListLipidModule(i,1); %Extract compartment abbreviation of LipidModule
        compAbbTemplate = CompListTemplate(i,1); %Extract compartment abbreviation of ModelTemplate

        % Harmonize compartment abbreviation in 'Comps' field of LipidModule
        compsIdx = strcmp(harmLipidModule.comps, compAbbLm);
        harmLipidModule.comps(compsIdx) = compAbbTemplate;

        % Add brackets to compartment abbreviations
        compAbbLm = strcat((insertBefore(compAbbLm,compAbbLm,"[")),']');
        compAbbTemplate = strcat((insertBefore(compAbbTemplate,compAbbTemplate,"[")),']');

        % Harmonize compartment abbreviation in the list of the LipidModule
        harmLipidModule.mets = strrep(harmLipidModule.mets, compAbbLm, compAbbTemplate);

        % Harmonize compartment abbreviation in the list of metabolites
        % to add to ModelTemplate:
        harmLipidModuleMets = strrep(harmLipidModuleMets,compAbbLm,compAbbTemplate);

        % Replace compartment abbreviation in the list of the Essential Metabolites:
        harmEssentialMets(:,1) = strrep(harmEssentialMets(:,1),compAbbLm,compAbbTemplate);
    end
end

%% Integration of metabolites information between the models:

% Proceed to integrate the models by identifying equivalent metabolites and
% harmonize their IDs and Names:
assignin('base','HarmEssentialMets',harmEssentialMets)

% Create struct with LipidModule harmonized variables:
harmLmVars.HarmLmMets   = harmLipidModuleMets; 
harmLmVars.HarmEssMets  = harmEssentialMets; 
harmLmVars.HarmLM       = harmLipidModule;


[integLmMets,harmLipidModuleInteg,modelTemplate2] = IntegrateEssentialMets(harmLmVars, pairedCompartments, unpairedCompartments);

if isempty(integLmMets)
    return
end

%% Integrate de LipidModule into ModelTemplate by adding the metabolites and reactions:

% Add new ('not connected') metabolites to ModelTemplate:
[modelTemplate3] = AddMetabolites(integLmMets,modelTemplate2); 

% Add harmonized LipidModule reactions to ModelTemplate:
AddRxnsToModel(modelTemplate3,harmLipidModuleInteg,unpairedCompartments);

end